package solution_tutorial2;

import java.util.Scanner;
import java.util.Stack;

public class week2_1 {

	public static void main(String[] args) {
		Scanner input = new Scanner(System.in);
		Stack<Integer> stack = new Stack<Integer>();
		int[] num = new int[1000];
		String first, result = null;
		int temp;

		while (input.hasNextLine()) {
			first = input.nextLine();

			for (int i = 0; i < first.length(); i++) {
				num[i] = (byte) first.charAt(i) - 65;
			}

			for (int i = 0; i < first.length(); i++) {
				if (i == 0 && num[i] >= 0 && num[i] <= 9) {// 첫 자리 확인
					result = Integer.toString(num[i]);
				} else if (i == 0 && ((num[i] == 15) || (num[i] == 18) || (num[i] == 19) || (num[i] == 21))) { // 연산자로 시작
					System.out.println("Error");
					break;
				}else if(0 == first.length() - 1) {// 첫자리가 숫자로 끝남.
					System.out.print(result);
				}
					
				if (i > 0 && num[i] >= 0 && num[i] <= 9) {// 두번째 부터 확인
					result = result.concat(Integer.toString(num[i - 1]));
					if (i == first.length() - 1 && stack.isEmpty())
						System.out.print(result);
				} else if (i == first.length()-1 && !stack.isEmpty()&& num[i] >= 0 && num[i] <= 9) {// 정상적으로 끝났을때
					if(stack.pop()==15) {
						temp = stack.pop() + Integer.parseInt(result);
						System.out.println(temp);
					}else if(stack.pop()==18) {
						temp = stack.pop() - Integer.parseInt(result);
						System.out.println(temp);
					}else if(stack.pop()==19) {
						temp = stack.pop() * Integer.parseInt(result);
						System.out.println(temp);
					}else if(stack.pop()==21) {
						temp = stack.pop() / Integer.parseInt(result);
						System.out.println(temp);
					}
				}else if (i > 0 && ((num[i] == 15) || (num[i] == 18) || (num[i] == 19) || (num[i] == 21))) {// 연산자 처리
					if (((num[i - 1] == 15) || (num[i - 1] == 18) || (num[i - 1] == 19) || (num[i - 1] == 21))||i == first.length() - 1) {// 연산자 중복과 마지막이 연산인 경우
						System.out.println("Error");
						break;
					} else if(result != null && stack.isEmpty()) {// 처음 숫자와 연산
						stack.push(Integer.parseInt(result));
						stack.push(num[i]);
						result = null;
					} else if(result != null && !stack.isEmpty()&&i != num.length - 1) {// 숫자와 연산자가 있고 다음 숫자 완성 후 종료가 아닌 다시 연산자가 나왔을때 즉, 계산할타이밍
						if(stack.pop()==15) {
							temp = stack.pop() + Integer.parseInt(result);
							stack.push(temp);
							stack.push(num[i]);
							result = null;
						}else if(stack.pop()==18) {
							temp = stack.pop() - Integer.parseInt(result);
							stack.push(temp);
							stack.push(num[i]);
							result = null;
						}else if(stack.pop()==19) {
							temp = stack.pop() * Integer.parseInt(result);
							stack.push(temp);
							stack.push(num[i]);
							result = null;
						}else if(stack.pop()==21) {
							temp = stack.pop() / Integer.parseInt(result);
							stack.push(temp);
							stack.push(num[i]);
							result = null;
						}
					}
				} else if (i == first.length() - 1 && !stack.isEmpty()) {
					System.out.println("Error");
					break;
				}
			}

		}
		input.close();
	}
}
